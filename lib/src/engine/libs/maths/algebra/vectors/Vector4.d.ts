import { Injector } from "../../../patterns/injectors/Injector";
import { Matrix4 } from "../matrices/Matrix4";
import { Vector3 } from "./Vector3";
export { Vector4Values };
export { Vector4 };
export { Vector4Constructor };
export { Vector4Injector };
export { Vector4Base };
declare type Vector4Values = [number, ...number[]] & {
    length: 4;
};
interface Vector4Constructor {
    readonly prototype: Vector4;
    new (): Vector4;
    new (values: Vector4Values): Vector4;
    mult(mat: Matrix4, vec: Vector4): Vector4;
    fromXYZ(vec: Vector3): Vector4;
}
interface Vector4 {
    readonly array: ArrayLike<number>;
    values: Vector4Values;
    x: number;
    y: number;
    z: number;
    w: number;
    setArray(array: WritableArrayLike<number>): this;
    setValues(v: Vector4Values): this;
    copy(vec: Vector4): this;
    clone(): this;
    equals(vec: Vector4): boolean;
    setZeros(): this;
    add(vec: Vector4): this;
    addScalar(k: number): this;
    sub(vec: Vector4): this;
    lerp(vec: Vector4, t: number): this;
    clamp(min: Vector4, max: Vector4): this;
    multScalar(k: number): this;
    dot(vec: Vector4): number;
    len(): number;
    lenSq(): number;
    dist(vec: Vector4): number;
    distSq(vec: Vector4): number;
    normalize(): this;
    negate(): this;
    mult(vec: Vector4): this;
    addScaled(vec: Vector4, k: number): this;
    writeIntoArray(out: WritableArrayLike<number>, offset?: number): void;
    readFromArray(arr: ArrayLike<number>, offset?: number): this;
}
declare class Vector4Base {
    protected _array: WritableArrayLike<number>;
    constructor();
    constructor(values: Vector4Values);
    get array(): ArrayLike<number>;
    get values(): Vector4Values;
    set values(values: Vector4Values);
    get x(): number;
    set x(x: number);
    get y(): number;
    set y(y: number);
    get z(): number;
    set z(z: number);
    get w(): number;
    set w(w: number);
    setArray(array: WritableArrayLike<number>): this;
    setValues(v: Vector4Values): this;
    copy(vec: Vector4): this;
    clone(): this;
    equals(vec: Vector4): boolean;
    setZeros(): this;
    add(vec: Vector4): this;
    addScalar(k: number): this;
    sub(vec: Vector4): this;
    lerp(vec: Vector4, t: number): this;
    clamp(min: Vector4, max: Vector4): this;
    multScalar(k: number): this;
    dot(vec: Vector4): number;
    len(): number;
    lenSq(): number;
    dist(vec: Vector4): number;
    distSq(vec: Vector4): number;
    normalize(): this;
    negate(): this;
    mult(vec: Vector4): this;
    static fromXYZ(vec: Vector3): Vector4Base;
    static mult(mat: Matrix4, vec: Vector4): Vector4;
    addScaled(vec: Vector4, k: number): this;
    writeIntoArray(out: WritableArrayLike<number>, offset?: number): void;
    readFromArray(arr: ArrayLike<number>, offset?: number): this;
}
declare var Vector4: Vector4Constructor;
declare const Vector4Injector: Injector<Vector4Constructor>;
