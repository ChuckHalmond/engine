import { Injector } from "../../../patterns/injectors/Injector";
import { StackPool } from "../../../patterns/pools/StackPool";
import { Matrix3 } from "../matrices/Matrix3";
import { Matrix4 } from "../matrices/Matrix4";
import { Vector3 } from "../vectors/Vector3";
export { QuaternionValues };
export { Quaternion };
export { QuaternionInjector };
export { QuaternionPool };
declare type QuaternionValues = [number, ...number[]] & {
    length: 4;
};
interface QuaternionConstructor {
    readonly prototype: Quaternion;
    new (): Quaternion;
    new (x: number, y: number, z: number, w: number): Quaternion;
    new (array: WritableArrayLike<number>): Quaternion;
    slerp(from: Quaternion, to: Quaternion, t: number): Quaternion;
    slerp(from: Quaternion, to: Quaternion, t: number, out: Quaternion): Quaternion;
    fromArray(vector: ArrayLike<number>): Quaternion;
    fromAxisAngle(axis: Vector3, angle?: number): Quaternion;
    fromEuler(pitch: number, yaw: number, roll: number): Quaternion;
    fromVector(vector: Vector3): Quaternion;
    fromMatrix(matrix: Matrix3): Quaternion;
}
interface Quaternion {
    readonly array: WritableArrayLike<number>;
    x: number;
    y: number;
    z: number;
    w: number;
    pitch: number;
    yaw: number;
    roll: number;
    getValues(): QuaternionValues;
    setValues(x: number, y: number, z: number, w: number): this;
    lookAt(source: Vector3, dest: Vector3): Quaternion;
    setEuler(pitch: number, yaw: number, roll: number): this;
    setMatrix(matrix: Matrix3): Quaternion;
    setMatrix(matrix: Matrix4): Quaternion;
    setAxisAngle(axis: Vector3, angle: number): this;
    setVectors(from: Vector3, to: Vector3): this;
    copy(quat: Quaternion): this;
    clone(): this;
    getAxis(out: Vector3): Vector3;
    getMatrix3(matrix: Matrix3): Matrix3;
    getMatrix4(matrix: Matrix4): Matrix4;
    rotate(vec: Vector3): Vector3;
    toVector(): Vector3;
    angleTo(quat: Quaternion): number;
    rotateTowards(quat: Quaternion): this;
    invert(): this;
    conjugate(): this;
    dot(quat: Quaternion): number;
    lengthSquared(): number;
    length(): number;
    normalize(): this;
    add(quat: Quaternion): this;
    sub(quat: Quaternion): this;
    mult(quat: Quaternion): this;
    scale(scalar: number): this;
    slerp(from: Quaternion, to: Quaternion, t: number): this;
    equals(quat: Quaternion): boolean;
    copyIntoArray(out: WritableArrayLike<number>, offset?: number): void;
    readFromArray(arr: ArrayLike<number>, offset?: number): void;
}
declare var Quaternion: QuaternionConstructor;
declare const QuaternionPool: StackPool<Quaternion>;
declare const QuaternionInjector: Injector<QuaternionConstructor>;
