import { Matrix4 } from "../../libs/maths/algebra/matrices/Matrix4";
import { Quaternion } from "../../libs/maths/algebra/quaternions/Quaternion";
import { Vector3 } from "../../libs/maths/algebra/vectors/Vector3";
import { UUID } from "../../libs/maths/statistics/random/UUIDGenerator";
import { Object3D } from "../rendering/scenes/objects/Object3D";
export { Transform };
export { TransformBase };
interface TransformConstructor {
    readonly prototype: Transform;
    new (): Transform;
    new (owner: Object3D): Transform;
}
interface Transform {
    hasChanged: boolean;
    readonly localArray: Float32Array;
    readonly array: Float32Array;
    readonly uuid: UUID;
    readonly owner: Object3D | null;
    localMatrix: Matrix4;
    matrix: Matrix4;
    getMatrix(matrix: Matrix4): Matrix4;
    setMatrix(matrix: Matrix4): this;
    getLocalMatrix(matrix: Matrix4): Matrix4;
    setLocalMatrix(matrix: Matrix4): this;
    getRight(vector: Vector3): Vector3;
    getLeft(vector: Vector3): Vector3;
    getUp(vector: Vector3): Vector3;
    getDown(vector: Vector3): Vector3;
    getForward(vector: Vector3): Vector3;
    getBackward(vector: Vector3): Vector3;
    getTranslation(vector: Vector3): Vector3;
    setTranslation(vector: Vector3): this;
    translate(vector: Vector3): this;
    getRotation(rotation: Quaternion): Quaternion;
    setRotation(rotation: Quaternion): this;
    rotate(rotation: Quaternion): this;
    getScaling(scaling: Vector3): Vector3;
    setScaling(scaling: Vector3): this;
    scale(scaling: Vector3): this;
    lookAt(target: Vector3, up?: Vector3): this;
}
declare class TransformBase implements Transform {
    readonly localArray: Float32Array;
    readonly array: Float32Array;
    readonly uuid: UUID;
    readonly owner: Object3D | null;
    readonly matrix: Matrix4;
    readonly localMatrix: Matrix4;
    hasChanged: boolean;
    readonly isStatic: boolean;
    constructor(owner?: Object3D, isStatic?: boolean);
    getMatrix(matrix: Matrix4): Matrix4;
    setMatrix(matrix: Matrix4): this;
    getLocalMatrix(matrix: Matrix4): Matrix4;
    setLocalMatrix(matrix: Matrix4): this;
    getRight(vector: Vector3): Vector3;
    getLeft(vector: Vector3): Vector3;
    getUp(vector: Vector3): Vector3;
    getDown(vector: Vector3): Vector3;
    getForward(vector: Vector3): Vector3;
    getBackward(vector: Vector3): Vector3;
    getTranslation(vector: Vector3): Vector3;
    setTranslation(vector: Vector3): this;
    translate(vector: Vector3): this;
    getScaling(vector: Vector3): Vector3;
    setScaling(vector: Vector3): this;
    scale(vector: Vector3): this;
    getRotation(rotation: Quaternion): Quaternion;
    setRotation(rotation: Quaternion): this;
    rotate(rotation: Quaternion): this;
    transformPoint(point: Vector3): Vector3;
    transformDirection(direction: Vector3): Vector3;
    transformVector(vector: Vector3): Vector3;
    lookAt(target: Vector3, up: Vector3): this;
}
declare const Transform: TransformConstructor;
